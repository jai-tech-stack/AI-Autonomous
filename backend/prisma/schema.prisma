// This is your Prisma schema file
// Save as: backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL") // Use direct connection for migrations
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizations OrganizationMember[]
  chatMessages  ChatMessage[]
  subscriptions Subscription[]
  usageRecords  Usage[]
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  industry  String?
  plan      String   @default("free") // free, pro, enterprise
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members            OrganizationMember[]
  aiCeoConfig        AiCeoConfig?
  chatMessages       ChatMessage[]
  autonomousTasks    AutonomousTask[]
  salesLeads         SalesLead[]
  leadActivities     LeadActivity[]
  meetings           Meeting[]
  emailTemplates     EmailTemplate[]
  campaigns          Campaign[]
  contentPosts       ContentPost[]
  emailCampaigns     EmailCampaign[]
  integrations       Integration[]
  subscriptions      Subscription[]
  usageRecords       Usage[]
}

model OrganizationMember {
  id             String   @id @default(uuid())
  userId         String
  organizationId String
  role           String   @default("member") // owner, admin, member
  createdAt      DateTime @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

model AiCeoConfig {
  id             String   @id @default(uuid())
  organizationId String   @unique
  templateId     String   // References template (generic_strategic, finance_cfo, etc.)
  ceoName        String
  personality    Json     // Stores personality traits, tone, expertise
  goals          Json     // Business goals from onboarding
  industry       String?
  customInstructions String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model ChatMessage {
  id             String   @id @default(uuid())
  organizationId String
  userId         String
  role           String   // user, assistant, system
  content        String   @db.Text
  metadata       Json?    // Store additional context
  createdAt      DateTime @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId, createdAt])
}

model AutonomousTask {
  id             String   @id @default(uuid())
  organizationId String
  taskType       String   // social_media_post, email_campaign, lead_followup, etc.
  status         String   @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, FAILED
  input          Json     // Task parameters
  output         Json?    // Generated content
  error          String?  @db.Text
  scheduledFor   DateTime?
  startedAt      DateTime?
  completedAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId, status])
  @@index([scheduledFor])
}

model SalesLead {
  id             String   @id @default(uuid())
  organizationId String
  name           String
  email          String
  phone          String?
  company        String?
  status         String   @default("new") // new, contacted, qualified, converted, lost
  source         String?
  notes          String?  @db.Text
  metadata       Json?
  score          Int      @default(0) // Lead scoring
  priority       String   @default("medium") // low, medium, high
  assignedTo     String?  // User ID
  lastContactAt  DateTime?
  nextFollowUp   DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  activities   LeadActivity[]
  meetings     Meeting[]

  @@index([organizationId, status])
  @@index([assignedTo])
  @@index([nextFollowUp])
}

model LeadActivity {
  id             String   @id @default(uuid())
  leadId         String
  organizationId String
  type           String   // email, call, meeting, note, task
  title          String
  description    String?  @db.Text
  metadata       Json?    // Additional data
  createdAt      DateTime @default(now())

  lead         SalesLead    @relation(fields: [leadId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([leadId])
  @@index([organizationId, createdAt])
}

model Meeting {
  id             String   @id @default(uuid())
  organizationId String
  leadId         String?
  title          String
  description    String?  @db.Text
  scheduledFor   DateTime
  duration       Int      @default(60) // minutes
  status         String   @default("scheduled") // scheduled, completed, cancelled
  meetingUrl     String?
  attendees      Json?    // Array of attendee info
  notes          String?  @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  lead         SalesLead?   @relation(fields: [leadId], references: [id], onDelete: SetNull)

  @@index([organizationId, scheduledFor])
  @@index([leadId])
}

model EmailTemplate {
  id             String   @id @default(uuid())
  organizationId String
  name           String
  subject        String
  content        String   @db.Text
  type           String   // follow_up, welcome, proposal, etc.
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId, type])
}

// RENAMED: MarketingCampaign -> Campaign
model Campaign {
  id             String   @id @default(uuid())
  organizationId String
  name           String
  subject        String?
  content        Json     // Campaign content/posts
  status         String   @default("draft") // draft, scheduled, sent, active, paused, completed
  scheduledFor   DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  contentPosts ContentPost[]

  @@index([organizationId, status])
}

model ContentPost {
  id             String   @id @default(uuid())
  organizationId String
  campaignId     String?
  platform       String   // linkedin, twitter, email
  content        Json     // Post content, images, etc.
  status         String   @default("draft") // draft, scheduled, published, failed
  scheduledFor   DateTime?
  publishedAt    DateTime?
  metrics        Json?    // Platform-specific metrics
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  campaign     Campaign?    @relation(fields: [campaignId], references: [id], onDelete: SetNull)

  @@index([organizationId, platform])
  @@index([scheduledFor])
  @@index([status])
}

model EmailCampaign {
  id             String   @id @default(uuid())
  organizationId String
  name           String
  subject        String
  content        Json     // Email content, template, etc.
  status         String   @default("draft") // draft, scheduled, sent, completed
  recipientCount Int      @default(0)
  openRate       Float?
  clickRate      Float?
  scheduledFor   DateTime?
  sentAt         DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId, status])
  @@index([scheduledFor])
}

model Integration {
  id             String   @id @default(uuid())
  organizationId String
  provider       String   // linkedin, twitter, gmail, stripe, etc.
  accessToken    String   @db.Text
  refreshToken   String?  @db.Text
  tokenExpiry    DateTime?
  metadata       Json?    // Store provider-specific data
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, provider])
  @@index([organizationId, isActive])
}

model Subscription {
  id             String   @id @default(uuid())
  userId         String
  organizationId String
  stripeCustomerId String? @unique
  stripeSubscriptionId String? @unique
  plan           String   // free, pro, enterprise
  status         String   @default("active") // active, cancelled, past_due
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd Boolean @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId])
  @@index([userId])
}

model Usage {
  id             String   @id @default(uuid())
  organizationId String
  userId         String
  resource       String   // tasks, posts, emails, etc.
  count          Int      @default(0)
  period         String   // monthly, daily
  date           DateTime @default(now())
  createdAt      DateTime @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId, resource, period, date])
  @@index([organizationId, date])
}