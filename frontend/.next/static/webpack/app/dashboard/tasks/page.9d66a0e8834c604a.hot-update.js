"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/tasks/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiClient: function() { return /* binding */ apiClient; },\n/* harmony export */   handleApiError: function() { return /* binding */ handleApiError; },\n/* harmony export */   setupApiInterceptors: function() { return /* binding */ setupApiInterceptors; },\n/* harmony export */   useApi: function() { return /* binding */ useApi; }\n/* harmony export */ });\nconst API_BASE_URL = \"http://localhost:5000\" || 0;\nclass ApiClient {\n    setToken(token) {\n        this.token = token;\n        if (true) {\n            localStorage.setItem(\"token\", token);\n        }\n    }\n    clearToken() {\n        this.token = null;\n        if (true) {\n            localStorage.removeItem(\"token\");\n        }\n    }\n    async request(endpoint) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const url = \"\".concat(this.baseURL).concat(endpoint);\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            ...options.headers\n        };\n        if (this.token) {\n            headers[\"Authorization\"] = \"Bearer \".concat(this.token);\n        }\n        try {\n            const response = await fetch(url, {\n                ...options,\n                headers\n            });\n            const data = await response.json();\n            if (!response.ok) {\n                return {\n                    success: false,\n                    error: data.message || \"Request failed\"\n                };\n            }\n            return {\n                success: true,\n                data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : \"Network error\"\n            };\n        }\n    }\n    // Auth endpoints\n    async login(email, password) {\n        return this.request(\"/api/auth/login\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                email,\n                password\n            })\n        });\n    }\n    async register(userData) {\n        return this.request(\"/api/auth/register\", {\n            method: \"POST\",\n            body: JSON.stringify(userData)\n        });\n    }\n    // Tasks endpoints\n    async getTasks(organizationId) {\n        return this.request(\"/api/tasks/\".concat(organizationId));\n    }\n    async createTask(taskData) {\n        return this.request(\"/api/tasks\", {\n            method: \"POST\",\n            body: JSON.stringify(taskData)\n        });\n    }\n    async getTask(taskId) {\n        return this.request(\"/api/tasks/\".concat(taskId));\n    }\n    async retryTask(taskId) {\n        return this.request(\"/api/tasks/\".concat(taskId, \"/retry\"), {\n            method: \"POST\"\n        });\n    }\n    // Chat endpoints\n    async getChatMessages(organizationId) {\n        return this.request(\"/api/chat/\".concat(organizationId));\n    }\n    async sendMessage(messageData) {\n        return this.request(\"/api/chat\", {\n            method: \"POST\",\n            body: JSON.stringify(messageData)\n        });\n    }\n    // Analytics endpoints\n    async getAnalytics(organizationId) {\n        return this.request(\"/api/analytics/\".concat(organizationId));\n    }\n    // CRM endpoints\n    async getLeads(organizationId) {\n        return this.request(\"/api/crm/leads/\".concat(organizationId));\n    }\n    async createLead(leadData) {\n        return this.request(\"/api/crm/leads\", {\n            method: \"POST\",\n            body: JSON.stringify(leadData)\n        });\n    }\n    async updateLead(leadId, leadData) {\n        return this.request(\"/api/crm/leads/\".concat(leadId), {\n            method: \"PUT\",\n            body: JSON.stringify(leadData)\n        });\n    }\n    async getLeadActivities(leadId) {\n        return this.request(\"/api/crm/activities/\".concat(leadId));\n    }\n    async createActivity(activityData) {\n        return this.request(\"/api/crm/activities\", {\n            method: \"POST\",\n            body: JSON.stringify(activityData)\n        });\n    }\n    // Content Calendar endpoints\n    async getContentPosts(organizationId) {\n        return this.request(\"/api/content-posts/\".concat(organizationId));\n    }\n    async createContentPost(postData) {\n        return this.request(\"/api/content-posts\", {\n            method: \"POST\",\n            body: JSON.stringify(postData)\n        });\n    }\n    async updateContentPost(postId, postData) {\n        return this.request(\"/api/content-posts/\".concat(postId), {\n            method: \"PUT\",\n            body: JSON.stringify(postData)\n        });\n    }\n    async deleteContentPost(postId) {\n        return this.request(\"/api/content-posts/\".concat(postId), {\n            method: \"DELETE\"\n        });\n    }\n    // Integration endpoints\n    async connectLinkedIn(organizationId) {\n        return this.request(\"/api/integrations/linkedin/connect\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                organizationId\n            })\n        });\n    }\n    async postToLinkedIn(postData) {\n        return this.request(\"/api/integrations/linkedin/post\", {\n            method: \"POST\",\n            body: JSON.stringify(postData)\n        });\n    }\n    async checkLinkedInConnection(organizationId) {\n        return this.request(\"/api/integrations/linkedin/\".concat(organizationId));\n    }\n    async connectTwitter(organizationId) {\n        return this.request(\"/api/integrations/twitter/connect\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                organizationId\n            })\n        });\n    }\n    async postToTwitter(postData) {\n        return this.request(\"/api/integrations/twitter/post\", {\n            method: \"POST\",\n            body: JSON.stringify(postData)\n        });\n    }\n    async checkTwitterConnection(organizationId) {\n        return this.request(\"/api/integrations/twitter/\".concat(organizationId));\n    }\n    // AI Reports endpoints\n    async generateReport(reportData) {\n        return this.request(\"/api/ai-reports/generate\", {\n            method: \"POST\",\n            body: JSON.stringify(reportData)\n        });\n    }\n    async queryReports(queryData) {\n        return this.request(\"/api/ai-reports/query\", {\n            method: \"POST\",\n            body: JSON.stringify(queryData)\n        });\n    }\n    async getScheduledReports(organizationId) {\n        return this.request(\"/api/ai-reports/scheduled/\".concat(organizationId));\n    }\n    // Usage and Subscription endpoints\n    async getUsage(organizationId) {\n        return this.request(\"/api/usage/\".concat(organizationId));\n    }\n    async checkUsageLimit(usageData) {\n        return this.request(\"/api/usage/check\", {\n            method: \"POST\",\n            body: JSON.stringify(usageData)\n        });\n    }\n    async recordUsage(usageData) {\n        return this.request(\"/api/usage/record\", {\n            method: \"POST\",\n            body: JSON.stringify(usageData)\n        });\n    }\n    async getSubscription(organizationId) {\n        return this.request(\"/api/subscription/\".concat(organizationId));\n    }\n    // Stripe endpoints\n    async createCheckoutSession(checkoutData) {\n        return this.request(\"/api/stripe/create-checkout\", {\n            method: \"POST\",\n            body: JSON.stringify(checkoutData)\n        });\n    }\n    // Teams\n    async listMembers(organizationId) {\n        return this.request(\"/api/teams/members/\".concat(organizationId));\n    }\n    async inviteMember(data) {\n        return this.request(\"/api/teams/invite\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    async changeMemberRole(data) {\n        return this.request(\"/api/teams/role\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    async removeMember(data) {\n        return this.request(\"/api/teams/remove\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    // Activity logs\n    async createActivity(data) {\n        return this.request(\"/api/activity\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    async getActivities(organizationId) {\n        return this.request(\"/api/activity/\".concat(organizationId));\n    }\n    // Comments\n    async addTaskComment(data) {\n        return this.request(\"/api/comments/task\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    async getTaskComments(taskId) {\n        return this.request(\"/api/comments/task/\".concat(taskId));\n    }\n    async addPostComment(data) {\n        return this.request(\"/api/comments/post\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    async getPostComments(postId) {\n        return this.request(\"/api/comments/post/\".concat(postId));\n    }\n    // Email send (Nodemailer)\n    async sendEmail(data) {\n        return this.request(\"/api/email/send\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    // AI media\n    async transcribeWhisper(data) {\n        return this.request(\"/api/ai/whisper/transcribe\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    async generateDalle(data) {\n        return this.request(\"/api/ai/dalle/generate\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    // Referrals\n    async getOrCreateReferralCode(data) {\n        return this.request(\"/api/referrals/code\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    async getReferralStats(organizationId) {\n        return this.request(\"/api/referrals/\".concat(organizationId));\n    }\n    async trackReferral(data) {\n        return this.request(\"/api/referrals/track\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    // Scheduler\n    async suggestSchedule(data) {\n        return this.request(\"/api/scheduler/suggest\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    async schedulePost(data) {\n        return this.request(\"/api/scheduler/schedule-post\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    async bulkSchedule(data) {\n        return this.request(\"/api/scheduler/bulk-schedule\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    constructor(baseURL){\n        this.token = null;\n        this.baseURL = baseURL;\n        if (true) {\n            this.token = localStorage.getItem(\"token\");\n        }\n    }\n}\nconst apiClient = new ApiClient(API_BASE_URL);\n// Helper hooks for React components\nfunction useApi() {\n    return apiClient;\n}\n// Error handling utilities\nfunction handleApiError(error) {\n    let defaultMessage = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"An error occurred\";\n    var _error_response_data, _error_response;\n    if (error === null || error === void 0 ? void 0 : (_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) {\n        return error.response.data.message;\n    }\n    if (error === null || error === void 0 ? void 0 : error.message) {\n        return error.message;\n    }\n    return defaultMessage;\n}\n// Request interceptor for adding auth token\nfunction setupApiInterceptors() {\n    if (true) {\n        const token = localStorage.getItem(\"token\");\n        if (token) {\n            apiClient.setToken(token);\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});